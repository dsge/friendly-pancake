FORMAT: 1A
HOST: http://whc-vote-be.dev.clapp.eu/api/1.0

# WHC Vote

- Minden http request `Content-type: application/json`-t küld és fogad, kivéve, ha mást írunk lentebb
- Minden API endpoint standard http headerekkel és http hibakódokkal dolgozik
- Ha a kliensnek van auth tokene (azaz “be van jelentkezve”), akkor minden további http requesthez csatolnia kell egy `Authorization: Bearer <auth token>` headert

## Authentication [/auth]

### Login [POST /auth/login]

Bejelentkezni email cimmel es jelszoval vagy social auth segítségével.

Ez az endpoint sikeres bejelentkezés esetén egy JWT tokent ( https://jwt.io ) ad vissza. A token a következőket tartalmazza:

```
{
    "uid": 2, //string/int user unique id
    "iss": "http://whc-vote-be.dev.clapp.eu/api/1.0/auth/login", //string token származási helye
    "iat": 1464959200, //int unix timestamp, token létrehozásának időpontja
    "exp": 1464962800, //int unix timestamp, token lejáratának időpontja
    "data": {
        "roles": [], //array of strings, másolat a belépett user entity `roles` mezőjéről
    },
    "jti": "45ac5cd03267ce11158177ec61c1bbc5" //string token unique id
 }
```

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu",
                "password": "newpassword"
            }

+ Response 200 (application/json)

    + Body

            {
                "token": "auth token"
            }

### Reset password [POST /auth/password/reset]

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu"
            }

+ Response 200 (application/json)

### Confirm code [POST /auth/password/confirm]

+ Request (application/json)

    + Body

            {
                "token": "1234",
                "password": "newpassword",
                "email": "user@whc.hu"
            }

+ Response 200 (application/json)

### Refresh token [POST /auth/token]

Élő, még nem lejárt token lecserélése egy új tokenre. - csak bejelentkezve!

+ Response 200 (application/json)

    + Attributes

        + token: `valid token` (string)


## User  [/user]

### User list [GET]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

    + Attributes(UserPager)

### Create user [POST]

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu" (required, string),
                "password": "newpasword" (required, string),
                "terms_accepted": true (required, boolean)
            }

+ Response 201 (application/json)

    + Body

            {
                "token": "auth token"
            }

## User Details [/user/{user_id}]

+ Parameters
    + user_id (required, number, `1`) - User ID or "me"

### User detail [GET]

+ Response 200 (application/json)

    + Attributes(ExtendedUser)

### Edit user data [PUT]

+ Request (application/json)

    + Body

            {
                "password": "newpasword" (optional, string),
                "request_notification": true (optional, boolean)
            }

+ Response 200 (application/json)

    + Attributes(ExtendedUser)

### Delete user [DELETE]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

## Notification [/user/{user_id}/notification]

+ Parameters
    + user_id (required, number, `1`) - User ID

### Get new notification count [HEAD]

+ Request (application/json)

+ Response 200 (application/json)

    + Headers

            Notification-count: 3 (number, required)

### List user's notifications [GET /user/{user_id}/notification?{page}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + page (optional, number) - Oldalszám

+ Request (application/json)

+ Response 200 (application/json)

    + Attribute(NotificationPager)

### Remove notification [DELETE /user/{user_id}/notification/{notification_id}]

+ Parameters
    + user_id (required, number, `1`) - User ID
    + notification_id (required, number, `1`) - Notification ID

+ Response 200 (application/json)

## User rating [/user/{user_id}/rating]

+ Parameters
    + user_id (required, number, `1`) - User ID

## Add rating [POST]

+ Request (application/json)

    + Attribute(Rating)

+ Response 200 (application/json)


## Static content [/static_content]

### Static content list [GET]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

    + Attributes(StaticContentPager)

### Create static content [POST]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "slug": "terms" (required, string),
                "title": "Terms and conditions" (required, string),
                "content": "Terms and conditions content" (required, string)
            }

+ Response 201 (application/json)

## Static content Details [/static_content/{slug}]

+ Parameters
    + slug (required, string, `terms`) - Static content slug

### Static content detail [GET]

+ Response 200 (application/json)

    + Attributes(StaticContent)

### Edit static content [PUT]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "title": "New title" (optional, string),
                "content": "New content" (optional, string)
            }

+ Response 200 (application/json)

### Delete static content [DELETE]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)


## Role  [/role]

### Role list [GET]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

    + Attributes(array[Role])


## News  [/news]

### News list [GET]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

    + Attributes(NewsPager)

### Create news [POST]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "title": "News title" (required, string),
                "content": "News content" (required, string),
                "published_at": "2018-07-06 12:00:00" (required, string),
                "roles": [Role, Role] (optional, Array[Role])
            }

+ Response 201 (application/json)

    + Attributes(News)

## News Details [/news/{news_id}]

Csak 'manager' jogosultsággal használható.

+ Parameters
    + news_id (required, number, `1`) - News ID

### News detail [GET]

+ Response 200 (application/json)

    + Attributes(NewsDetailed)

### Edit news data [PUT]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "title": "News title" (optional, string),
                "content": "News content" (optional, string),
                "published_at": "2018-07-06 12:00:00" (optional, string),
                "roles": [Role, Role] (optional, Array[Role])
            }

+ Response 200 (application/json)

### Delete news [DELETE]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

## News title image [/news/{news_id}/title_image]

Csak 'manager' jogosultsággal használható.

+ Parameters
    + news_id (required, number, `1`) - News ID

### Upload title image [POST]

+ Request (multipart/form-data; boundary=BOUNDARY)

    + Body

            --BOUNDARY
            Content-Disposition: form-data; name='image'; filename='image.jpg'
            Content-Type: image/jpeg

            {file content}
            --BOUNDARY--

+ Response 200 (application/json)

## News with role [/role/{role_slug}/news]

### List News with role [GET /role/{role_slug}/news?{page}]

+ Parameters
    + role_slug (required, enum[string]) - User role
        + Members
            + accountant
            + hr
            + accountant_client
            + hr_client
            + business_partner
    + page (optional, number, `1`)

+ Response 200 (application/json)

    + Attribute (NewsPager)

### Get a single News details with role [GET /role/{role_slug}/news/{news_id}]

+ Parameters
    + role_slug (required, enum[string]) - User role
        + Members
            + accountant
            + hr
            + accountant_client
            + hr_client
            + business_partner
    + news_id (required, number, `1`)

+ Response 200 (application/json)

    + Attribute (NewsDetailed)

+ Response 404 (application/json)


## Question  [/question]

### Question list [GET]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

    + Attributes(QuestionPager)

### Create question [POST]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "text": "Question text" (required, string),
                "published_at": "2018-07-06 12:00:00" (required, string),
                "roles": [Role, Role] (optional, Array[Role])
            }

+ Response 201 (application/json)

    + Attributes(Question)

## Question Details [/question/{question_id}]

Csak 'manager' jogosultsággal használható.

+ Parameters
    + question_id (required, number, `1`) - Question ID

### Question detail [GET]

+ Response 200 (application/json)

    + Attributes(QuestionDetailed)

### Edit question data [PUT]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "text": "Question text" (optional, string),
                "published_at": "2018-07-06 12:00:00" (optional, string),
                "roles": [Role, Role] (optional, Array[Role])
            }

+ Response 200 (application/json)

### Delete question [DELETE]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

## Question title image [/question/{question_id}/title_image]

Csak 'manager' jogosultsággal használható.

+ Parameters
    + question_id (required, number, `1`) - Question ID

### Upload title image [POST]

+ Request (multipart/form-data; boundary=BOUNDARY)

    + Body

            --BOUNDARY
            Content-Disposition: form-data; name='image'; filename='image.jpg'
            Content-Type: image/jpeg

            {file content}
            --BOUNDARY--

+ Response 200 (application/json)

## Question [/role/{role_slug}/question]

### List Questions [GET /role/{role_slug}/question{?page}]

+ Parameters
    + role_slug (required, enum[string]) - User role
        + Members
            + accountant
            + hr
            + accountant_client
            + hr_client
            + business_partner
    + page (optional, number, `1`)

+ Response 200 (application/json)

    + Attribute (UserQuestionPager)

### Get a single question [GET /role/{role_slug}/question/{question_id}]

+ Parameters
    + role_slug (required, enum[string]) - User role
        + Members
            + accountant
            + hr
            + accountant_client
            + hr_client
            + business_partner
    + question_id (required, number, `1`)

+ Response 200 (application/json)

    + Attribute (UserQuestionDetailed)

+ Response 404 (application/json)

## Answer  [/question/{question_id}/answer]

+ Parameters
    + question_id (required, number, `1`) - Question ID

### Create answer [POST]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "text": "Answer text" (required, string),
                "order": 1 (required, number) - Megjelenési sorrend
            }

+ Response 201 (application/json)

    + Attributes(Answer)

## Answer Details [/question/{question_id}/answer/{answer_id}]

Csak 'manager' jogosultsággal használható.

+ Parameters
    + question_id (required, number, `1`) - Question ID
    + answer_id (required, number, `1`) - Answer ID

### Edit answer data [PUT]

Csak 'manager' jogosultsággal használható.

+ Request (application/json)

    + Body

            {
                "text": "Answer text" (optional, string),
                "order": 1 (optional, number)
            }

+ Response 200 (application/json)

### Delete answer [DELETE]

Csak 'manager' jogosultsággal használható.

+ Response 200 (application/json)

### Answer a question [POST /role/{role_slug}/question/{question_id}/answer]

+ Parameters
    + role_slug (required, enum[string]) - User role
        + Members
            + accountant
            + hr
            + accountant_client
            + hr_client
            + business_partner
    + question_id (required, number, `1`)

+ Request (application/json)

    + Attributes
        + answer (Answer)

+ Response 201 (application/json)

    + Attribute (UserQuestionAnswered)


## Request callback [/callback]

## Request a callback [POST]

Csak accountant_client és business_partner jogosultsággal használható

+ Request (application/json)

    + Body

            {
                "target": ["contact_person"]
            }

+ Response 200 (application/json)


## Device [/device]

## Add device [POST]

+ Request (application/json)

    + Body

            {
                "provider": "apple", - apple vagy google
                "device_token": "device_token_string"
            }

+ Response 200 (application/json)


# Data Structures

## Pager

+ total: 4 (number, required)
+ perPage: 10 (number, required)
+ page: 1 (number, required)
+ lastPage: 1 (number, required)

## UserPager (object)
+ Include Pager
+ data: ExtendedUser, ExtendedUser (array[ExtendedUser], required)

## BaseUser (object)
+ id: 7 (number, required)
+ name: `Lastname Firstname` (string, optional)
+ profile_pic_url: `https://whc.hu/profile/user7.jpg` (string, optional)
+ phone_number: `+3612345678` (string, optional) - Nemzetközi formátumban szóköz, kötöjel és zárójel nélkül

## ExtendedUser (object)
+ email: `user@whc.hu` (string, required)
+ request_notification: true (boolean, required)
+ level: `beginner` (enum[string], required)
    + Members
        + beginner
        + advanced
        + master
+ points: 0 (number, required)
+ required_points_for_next_level: 10 (number, required)

## NotificationPager (object)
+ Include Pager
+ data: TargetNotification, TargetNotification (array[TargetNotification], required)

## BaseNotification (object)
+ id: 1 (number, required)
+ unseen: true (boolean, optional) - Először kérdezi le a szervertől a kliens ezt a Notification-t
+ type: `rating` (enum[string], required)
    + Members
        + rating
        + call_back
+ created_at: `2018-05-31 12:00:00` (string, required) - Létrehozási dátum
+ expiring_at: `2018-06-02 12:00:00` (string, optional) - Lejárati dátum

## TargetNotification (object)
+ Include BaseNotification
+ target
    Include BaseUser

## Rating (object)
+ rating: 3 (number, required) - Egész szám 1-5-ig
+ comment: `Szöveges megjegyzés az értékeléshez` (string, optional)

## StaticContentPager (object)
+ Include Pager
+ data: StaticContent, StaticContent (array[StaticContent], required)

## StaticContent
+ title: `Terms and conditions` (required, string)
+ slug: `terms` (required, string)
+ content: `<p>Terms and conditions content</p>` (required, string) - HTML formatted string

## `Static_privacy`
+ title: `Privacy policy` (required, string)
+ slug: `privacy` (required, string)
+ content: `<p>Privacy policy content</p>` (required, string) - HTML formatted string

## Image (object)
+ small: `http://127.0.0.1:3333/image/small/news/6l/ed/6led9krl0qg5z8m33vdddd598mp6w2x4v31n7o7q.jpg` (required, string)
+ medium: `http://127.0.0.1:3333/image/medium/news/6l/ed/6led9krl0qg5z8m33vdddd598mp6w2x4v31n7o7q.jpg` (required, string)
+ large: `http://127.0.0.1:3333/image/large/news/6l/ed/6led9krl0qg5z8m33vdddd598mp6w2x4v31n7o7q.jpg` (required, string)
+ original: `http://127.0.0.1:3333/image/original/news/6l/ed/6led9krl0qg5z8m33vdddd598mp6w2x4v31n7o7q.jpg` (required, string)

## Role (object)
+ id: 1 (number, required)
+ slug: `role_slug` (required, string)
+ name: `Role name` (required, string)
+ description: `Role description` (required, string)

## NewsPager
+ Include Pager
+ data: News, News (array[News], required)

## News (object)
+ id: 1 (number, required)
+ title: `News Title` (required, string)
+ image_url (optional)
    Include Image
+ published_by: `WHC csapata` (required, string)
+ published_at: `2017-02-08 09:09:09` (required, string)

## NewsDetailed (object)
+ Include News
+ content: `<p>News content</p>` (required, string) - HTML formatted string

## QuestionPager
+ Include Pager
+ data: Question, Question (array[Question], required)

## Question (object)
+ id: 1 (number, required)
+ text: `Favourite programming language?` (string, required)
+ image_url (optional)
    Include Image
+ published_by: `WHC csapata` (string, required)
+ published_at: `2017-02-08 09:09:09` (string, required)

## QuestionDetailed (object)
+ Include Question
+ answers: Answer, Answer, Answer, Answer (array[Answer], required)

## UserQuestionPager
+ Include Pager
+ data: UserQuestionDetailed, UserQuestionDetailed (array[UserQuestionDetailed], required)

## UserQuestion (object)
+ Include Question
+ voted: false (boolean, required)

## UserQuestionDetailed (object)
+ Include UserQuestion
+ answers: Answer, Answer, Answer, Answer (array[Answer], required)

## Answer (object)
+ id: 1 (number, required)
+ text: `Swift` (string, required)

## UserQuestionAnswered (object)
+ Include UserQuestion
+ answers: AnswerResult, AnswerResult, AnswerResult, AnswerResult (array[AnswerResult], required)

## AnswerResult (object)
+ Include Answer
+ selected: true (boolean, optional)

