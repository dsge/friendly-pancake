FORMAT: 1A
HOST: http://whc-vote-be.dev.clapp.eu/api/1.0

# WHC Vote

- Minden http request `Content-type: application/json`-t küld és fogad, kivéve, ha mást írunk lentebb
- Minden API endpoint standard http headerekkel és http hibakódokkal dolgozik
- Ha a kliensnek van auth tokene (azaz “be van jelentkezve”), akkor minden további http requesthez csatolnia kell egy `Authorization: Bearer <auth token>` headert

## Authentication [/auth]

### Login [POST /auth/login]

Bejelentkezni email cimmel es jelszoval vagy social auth segítségével.

Ez az endpoint sikeres bejelentkezés esetén egy JWT tokent ( https://jwt.io ) ad vissza. A token a következőket tartalmazza:

```
{
    "roles": [], //array of strings, másolat a belépett user entity `roles` mezőjéről
    "sub": 2, //string/int user unique id
    "iss": "http://whc-vote-be.dev.clapp.eu/api/1.0/auth/login", //string token származási helye
    "iat": 1464959200, //int unix timestamp, token létrehozásának időpontja
    "exp": 1464962800, //int unix timestamp, token lejáratának időpontja
    "nbf": 1464959200, //int unix timestamp, token érvényesség kezdetének időpontja
    "jti": "45ac5cd03267ce11158177ec61c1bbc5" //string token unique id
 }
```

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu",
                "password": "newpassword"
            }

+ Response 200 (application/json)

    + Body

            {
                "token": "auth token"
            }

### Reset password [POST /auth/password/reset]

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu"
            }

+ Response 200 (application/json)

### Confirm code [POST /auth/password/confirm]

+ Request (application/json)

    + Body

            {
                "token": "1234",
                "password": "newpassword",
                "email": "user@whc.hu"
            }

+ Response 200 (application/json)

### Refresh token [POST /auth/token]

Élő, még nem lejárt token lecserélése egy új tokenre. - csak bejelentkezve!

+ Response 200 (application/json)

    + Attributes

        + token: `valid token` (string)


## User  [/user]

### User list [GET]

+ Response 404 (application/json)
+ Response 200 (application/json)

    + Attributes(UserPager)

### Create user [POST]

+ Request (application/json)

    + Body

            {
                "email": "user@whc.hu" (required, string),
                "password": "newpasword" (required, string),
                "terms_accepted": true (required, boolean)
            }

+ Response 201

    + Body

            {
                "token": "auth token"
            }

## User Details [/user/{id}]

+ Parameters
    + id (required, number, `1`) - User ID or "me"

### User detail [GET]

+ Response 200 (application/json)

    + Attributes(User)

### Edit user data [PUT]

+ Request (application/json)

    + Body

            {
                "password": "newpasword" (optional, string),
                "request_notification": true (optional, boolean)
            }

+ Response 200 (application/json)

    + Attributes(User)


## Static content [/static_content]

### Terms and conditions [GET /static_content/terms]

+ Response 200 (application/json)

    + Attribute(Static_terms)

### Privacy policy [GET /static_content/privacy]

+ Response 200 (application/json)

    + Attribute(Static_privacy)


## News [/news]

### List News [GET /news?{page}]

+ Parameters
    + page (optional, number, `1`)

+ Response 200 (application/json)

    + Attribute (NewsPager)

### Get a single News details [GET /news/{id}]

+ Parameters
    + id (required, number, `1`)

+ Response 200 (application/json)

    + Attribute (NewsDetailed)

+ Response 404 (application/json)


## Question [/question]

### List Questions [GET /question{?page}]

+ Parameters
    + page (optional, number, `1`)

+ Response 200 (application/json)

    + Attribute (QuestionPager)

### Get a single question [GET /question/{id}]

+ Parameters
    + id (required, number, `1`)

+ Response 200 (application/json)

    + Attribute (QuestionDetailed)

+ Response 404 (application/json)

### Answer a question [POST /question/{id}/answer]

+ Parameters
    + id (required, number, `1`)

+ Request (application/json)

    + Attributes
        + answer (Answer)

+ Response 201 (application/json)

    + Attribute (QuestionAnswered)


# Data Structures

## Pager

+ total: 4 (number, required)
+ per_page: 10 (number, required)
+ current_page: 1 (number, required)
+ last_page: 1 (number, required)
+ from: 1 (number, required)
+ to: 4 (number, required)

## UserPager (object)
+ Include Pager
+ data: User, User (array[User], required)

## User (object)
+ id: 7 (number, required)
+ email: `user@whc.hu` (string, optional)
+ request_notification: true (boolean, required)

## `Static_terms`
+ title: `Terms and conditions` (required, string)
+ slug: `terms` (required, string)
+ content: `<p>Terms and conditions content</p>` (required, string) - HTML formatted string

## `Static_privacy`
+ title: `Privacy policy` (required, string)
+ slug: `privacy` (required, string)
+ content: `<p>Privacy policy content</p>` (required, string) - HTML formatted string

## NewsPager
+ Include Pager
+ data: News, News (array[News], required)

## News (object)
+ id: 1 (number)
+ title: `News Title` (required, string)
+ image: `http://ichef.bbci.co.uk/news/976/cpsprodpb/7F89/production/_86594623_thinkstockphotos-473333164.jpg` (optional, string)
+ published_by: `WHC csapata` (required, string)
+ published_at: `2017-02-08 09:09:09` (required, string)

## NewsDetailed (object)
+ Include News
+ lead: `News lead` (optional, string)
+ content: `<p>News content</p>` (required, string) - HTML formatted string

## QuestionPager
+ Include Pager
+ data: Question, Question (array[Question], required)

## Question (object)
+ id: 1 (number, required)
+ text: `Favourite programming language?` (string, required)
+ image: `http://ichef.bbci.co.uk/news/976/cpsprodpb/7F89/production/_86594623_thinkstockphotos-473333164.jpg` (string, optional)
+ published_by: `WHC csapata` (string, required)
+ published_at: `2017-02-08 09:09:09` (string, required)
+ expired: false (boolean, required)
+ voted: false (boolean, required)

## QuestionDetailed (object)
+ Include Question
+ answers: Answer, Answer, Answer, Answer (array[Answer], required)

## Answer (object)
+ id: 1 (number, required)
+ text: `Swift` (string, required)

## QuestionAnswered (object)
+ Include Question
+ answers: AnswerResult, AnswerResult, AnswerResult, AnswerResult (array[AnswerResult], required)

## AnswerResult (object)
+ Include Answer
+ result: 12.5 (number, optional)
+ selected: true (boolean, optional)

